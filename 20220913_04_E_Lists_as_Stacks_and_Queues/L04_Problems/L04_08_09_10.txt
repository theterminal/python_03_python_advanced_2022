
# 08. *Crossroads


from collections import deque

green_light = int(input())
free_window = int(input())
crashed = False
time = green_light
extra_time = free_window

waiting_cars = deque()
passed_safely = 0
first_car = None
while True:
    time, extra_time = green_light, free_window  # reset the time !
    command = input()
    if command == 'END':
        break
    if command == 'green':
        while waiting_cars:
            first_car = waiting_cars[0]

            if len(first_car) <= time:  # car passed safely on green light time
                passed_safely += 1
                time -= len(first_car)

            elif time + extra_time >= len(first_car):  # car passed safely on extra time
                passed_safely += 1
                extra_time = (time + extra_time) - len(first_car)
                time = 0

            else:  # not even enter the cross road -> break
                if time:  # crash -> break
                    crashed = True
                break

            waiting_cars.popleft()  # after safely passed -> remove car from queue

        if crashed:  # if crashed , stop all loops
            break

        continue

    waiting_cars.append(command)

if crashed:
    index = time + extra_time  # index of crashed letter
    print('A crash happened!')
    print(f'{first_car} was hit at {first_car[index]}.')
else:
    print('Everyone is safe.')
    print(f'{passed_safely} total cars passed the crossroads.')


======================================================================================================================

# 09. *Key Revolver


from collections import deque

price_per_bullet = int(input())
initial_barrel_size = int(input())
barrel_size = initial_barrel_size

bullets = deque([int(x) for x in input().split()])  # LIFO -> starts from index[-1]
locks = deque([int(x) for x in input().split()])  # FIFO -> starts from index[0]
value = int(input())
total_bullets = 0
while True:
    if not bullets or not locks:
        break

    last_bullets = bullets.pop()
    first_lock = locks[0]
    total_bullets += 1

    if last_bullets <= first_lock:
        print('Bang!')
        locks.popleft()
    else:
        print('Ping!')

    barrel_size -= 1
    if barrel_size == 0 and bullets:
        print('Reloading!')
        barrel_size = initial_barrel_size

if not locks:
    print(f"{len(bullets)} bullets left. Earned ${value - (total_bullets * price_per_bullet)}")
else:
    print(f"Couldn't get through. Locks left: {len(locks)}")


======================================================================================================================

# 10. *Cups and Bottles


from collections import deque

cups = deque([int(x) for x in input().split()])  # FIFO -> start from first index[0]
bottles = deque([int(x) for x in input().split()])  # LIFO -> start from last index[-1]
wasted_water = 0
while True:
    if not cups or not bottles:
        break

    first_cup = cups[0]
    last_bottle = bottles.pop()

    if last_bottle >= first_cup:
        wasted_water += last_bottle - first_cup
        cups.popleft()
    else:
        cups[0] -= last_bottle
        if first_cup <= 0:
            wasted_water += abs(first_cup)
            cups.popleft()

if not cups:
    print(f"Bottles: {' '.join(str(x) for x in bottles)} ")
if not bottles:
    print(f"Cups: {' '.join(str(x) for x in cups)}")
print(f'Wasted litters of water: {wasted_water}')


======================================================================================================================

